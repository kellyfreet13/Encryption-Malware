import os, values
import json
from base64 import b64encode, b64decode
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding, serialization, hashes, hmac
from cryptography.hazmat.primitives.asymmetric import padding as assym_padding
from cryptography.exceptions import InvalidSignature


def MydecryptMAC(ciphertext, iv, tag, EncKey, HMACKey):
    # integrity check
    hmac_check = hmac.HMAC(HMACKey, hashes.SHA256(), backend=default_backend())

    try:
        # verify the tag is valid
        hmac_check.verify(tag)

        # set up decryption method and un-pad the data
        pt = Cipher(algorithms.AES(EncKey), modes.CBC(iv), backend=default_backend())
        decryptor = pt.decryptor()
        data = decryptor.update(ciphertext) + decryptor.finalize()
        unpadder = padding.PKCS7(values.CBC_BLOCK_SIZE).unpadder()

        # return the plaintext
        return unpadder.update(data) + unpadder.finalize()

    # catch an invalid tag error
    except InvalidSignature:
        print("invalid hmac signature")
        return None


def MyfileDecryptMAC(decrypted_image_filepath, ciphertext, iv, tag, EncKey, HMACKey, ext):
    # decryption
    plaintext = MydecryptMAC(ciphertext, iv, tag, EncKey, HMACKey)
    #plainext = b64decode(plaintext)

    # open the encrypted 'image' in order to decrypt
    decrypt = open(decrypted_image_filepath, "wb")
    decrypt.write(plaintext)
    decrypt.close()


def MyRSADecryptMAC(filepath, RSA_Privatekey_filepath):

    # load the ciphtertext, key, iv, and ext from the JSON file
    with open(values.JSON_PATH) as jsonFile:
        encrypted_data = json.load(jsonFile)

        RSACipher =     b64decode(encrypted_data["RSACipher"])
        ciphertext =    b64decode(encrypted_data["Cipher text"])
        iv =            b64decode(encrypted_data["IV"])
        tag =           b64decode(encrypted_data["Tag"])
        ext =           encrypted_data["Extension"]

    # read in private key
    with open(RSA_Privatekey_filepath, 'rb') as key_file:
        private_key = serialization.load_pem_private_key(
            key_file.read(),
            password=None,
            backend=default_backend()
        )
    key_file.close()

    # decrypt
    RSA_Enc_HMAC_key = private_key.decrypt(
        RSACipher,
        assym_padding.OAEP(
            mgf=assym_padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )

    # split the rsa key into the encryption key and hmac key
    EncKey = RSA_Enc_HMAC_key[:values.ENC_KEY_SIZE]
    HMACKey = RSA_Enc_HMAC_key[values.HMAC_KEY_LEN:]

    # decrypt the file now that we have the keys
    MyfileDecryptMAC(filepath, ciphertext, iv, tag, EncKey, HMACKey, ext)

    # remove the old json file
    ######################


