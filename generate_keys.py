from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.backends import default_backend as crypto_default_backend
import values

def generate_keys():
    # get private key
    private_key = rsa.generate_private_key(
        backend=crypto_default_backend(),
        public_exponent=values.RSA_PUBLIC_EXPONENT,
        key_size=values.RSA_KEY_SIZE
    )

    # get public key
    public_key = private_key.public_key()

    # serialize public key to pem
    pubk_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )

    # serialize private key to pem
    prvk_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )

    # what does this do?
    pubk_pem.splitlines()[0]
    prvk_pem.splitlines()[0]

    # write public key to pem file
    with open("public_key.PEM", "wb") as pem_file:
        pem_file.write(pubk_pem)
    pem_file.close()

    # write private key to pem file
    with open("private_key.PEM", "wb") as pem_file:
        pem_file.write(prvk_pem)
    pem_file.close()
