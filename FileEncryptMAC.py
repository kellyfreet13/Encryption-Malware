import os, values
import json
from base64 import b64encode, b64decode
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding, serialization, hashes, hmac
from cryptography.hazmat.primitives.asymmetric import padding as asym_padding


def MyencryptMAC(message, EncKey, HMACKey):
    if len(EncKey) != values.ENC_KEY_SIZE:
        print("The encryption key has to be 32 bytes")
        return None, None, None
    if len(HMACKey) < values.HMAC_KEY_LEN:
        print("The HMAC key must be 256 bits!")

    # iv
    IV = os.urandom(values.IV_SIZE)

    padder = padding.PKCS7(values.CBC_BLOCK_SIZE).padder()
    padded_data = padder.update(message) + padder.finalize()
    backend = default_backend()

    cipher = Cipher(algorithms.AES(EncKey), modes.CBC(IV), backend=backend)
    encryptor = cipher.encryptor()
    ciphertext = encryptor.update(padded_data) + encryptor.finalize()

    # we encrypted, so now we can mac
    tag = hmac.HMAC(HMACKey, hashes.SHA256(), backend=default_backend())
    tag.update(ciphertext)
    tag = tag.finalize()

    return ciphertext, IV, tag


def MyfileEncryptMAC(filepath):
    # ensure filepath is valid
    if not os.path.isfile(filepath):
        print("Invalid file path or nonexistent file.")
        return None, None, None, None, None, None

    # generate encryption and hmac key (note: keys are same size)
    EncKey = os.urandom(values.ENC_KEY_SIZE)
    HMACKey = os.urandom(values.HMAC_KEY_LEN)

    # get file name and calculate encrypted file name
    filename, ext = os.path.splitext(filepath)

    # read file in binary
    file = open(filepath, 'rb')
    raw_data = file.read()
    file.close()
    message = b64encode(raw_data)

    ciphertext, iv, tag = MyencryptMAC(message, EncKey, HMACKey)

    return ciphertext, iv, tag, EncKey, HMACKey, values.EXTENSION


def MyRSAEncryptMAC(filepath, RSA_Publickey_filepath):
    # ensure RSA key file exists
    if not os.path.isfile(RSA_Publickey_filepath):
        print("File path for RSA public key not valid. The file may not exist.")
        return None, None, None, None, None

    # encrypt file
    ciphertext, iv, tag, EncKey, HMACKey, ext = MyfileEncryptMAC(filepath)

    # load key from pem file
    with open(RSA_Publickey_filepath, 'rb') as key_file:
        public_key = serialization.load_pem_public_key(
            key_file.read(),
            backend=default_backend()
        )
    key_file.close()

    concat = EncKey+HMACKey

    # encrypt the public key
    RSA_key_cipher = public_key.encrypt(
        concat,
        asym_padding.OAEP(
            mgf=asym_padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return RSA_key_cipher, ciphertext, iv, tag, ext

